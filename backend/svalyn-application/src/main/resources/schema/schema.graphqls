schema {
  query: Query
  mutation: Mutation
}

scalar Date

type Query {
  principal: User!
  projects(page: Int!): QueryProjectsConnection!
  project(projectId: ID!): Project
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  count: Int!
}

type User {
  id: ID!
  username: String!
}

type Description {
  id: ID!
  label: String!
}

type QueryProjectsConnection {
  edges: [QueryProjectsEdge!]!
  pageInfo: PageInfo!
}

type QueryProjectsEdge {
  node: Project!
}

type Project {
  id: ID!
  label: String!
  assessments(page: Int!): ProjectAssessmentsConnection!
  assessment(assessmentId: ID!): Assessment
  ownedBy: User!
  members: [User!]!
  createdBy: User!
  createdOn: Date!
  descriptions: [Description!]!
}

type ProjectAssessmentsConnection {
  edges: [ProjectAssessmentsEdge!]!
  pageInfo: PageInfo!
}

type ProjectAssessmentsEdge {
  node: Assessment!
}

type Assessment {
  id: ID!
  label: String!
  createdBy: User!
  createdOn: Date!
  lastModifiedBy: User!
  lastModifiedOn: Date!
  categories: [Category!]!
  success: Int!
  failure: Int!
  testCount: Int!
  status: AssessmentStatus!
}

enum AssessmentStatus {
  OPEN
  CLOSED
}

type Category {
  id: ID!
  label: String!
  details: String!
  requirements: [Requirement!]!
  status: TestStatus
}

type Requirement {
  id: ID!
  label: String!
  details: String!
  tests: [Test!]!
  status: TestStatus
}

type Test {
  id: ID!
  label: String!
  details: String!
  steps: [String!]
  status: TestStatus
}

enum TestStatus {
  SUCCESS
  FAILURE
}

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload!
  createAssessment(input: CreateAssessmentInput!): CreateAssessmentPayload!
  addMemberToProject(input: AddMemberToProjectInput!): AddMemberToProjectPayload!
  removeMemberFromProject(input: RemoveMemberFromProjectInput!): RemoveMemberFromProjectPayload!
  updateAssessmentStatus(input: UpdateAssessmentStatusInput!): UpdateAssessmentStatusPayload!
  updateTest(input: UpdateTestInput!): UpdateTestPayload!
  deleteProjects(input: DeleteProjectsInput!): DeleteProjectsPayload!
  deleteAssessments(input: DeleteAssessmentsInput!): DeleteAssessmentsPayload!
  leaveProject(input: LeaveProjectInput!): LeaveProjectPayload!
  changeProjectOwner(input: ChangeProjectOwnerInput!): ChangeProjectOwnerPayload!
}

type ErrorPayload {
  message: String!
}

input CreateProjectInput {
  label: String!
}

type CreateProjectSuccessPayload {
  project: Project!
}

union CreateProjectPayload = ErrorPayload | CreateProjectSuccessPayload

input CreateAssessmentInput {
  projectId: ID!
  descriptionId: ID!
  label: String!
}

type CreateAssessmentSuccessPayload {
  assessment: Assessment!
}

union CreateAssessmentPayload = ErrorPayload | CreateAssessmentSuccessPayload

input AddMemberToProjectInput {
  projectId: ID!
  username: String!  
}

type AddMemberToProjectSuccessPayload {
  project: Project!
}

union AddMemberToProjectPayload = ErrorPayload | AddMemberToProjectSuccessPayload

input RemoveMemberFromProjectInput {
  projectId: ID!
  username: String!
}

type RemoveMemberFromProjectSuccessPayload {
  project: Project!
}

union RemoveMemberFromProjectPayload = ErrorPayload | RemoveMemberFromProjectSuccessPayload

input UpdateAssessmentStatusInput {
  assessmentId: ID!
  status: AssessmentStatus!
}

type UpdateAssessmentStatusSuccessPayload {
  assessment: Assessment!
}

union UpdateAssessmentStatusPayload = ErrorPayload | UpdateAssessmentStatusSuccessPayload 

input UpdateTestInput {
  assessmentId: ID!
  testId: ID!
  status: TestStatus!
}

type UpdateTestSuccessPayload {
  assessment: Assessment!
}

union UpdateTestPayload = ErrorPayload | UpdateTestSuccessPayload

input DeleteProjectsInput {
  projectIds: [ID!]!
}

type DeleteProjectsSuccessPayload {
  principal: User!
}

union DeleteProjectsPayload = ErrorPayload | DeleteProjectsSuccessPayload

input DeleteAssessmentsInput {
  projectId: ID!
  assessmentIds: [ID!]!
}

type DeleteAssessmentsSuccessPayload {
  project: Project!
}

union DeleteAssessmentsPayload = ErrorPayload | DeleteAssessmentsSuccessPayload

input LeaveProjectInput {
  projectId: ID!
}

type LeaveProjectSuccessPayload {
  principal: User!
}

union LeaveProjectPayload = ErrorPayload | LeaveProjectSuccessPayload

input ChangeProjectOwnerInput {
  projectId: ID!
  newOwnerId: ID!
}

type ChangeProjectOwnerSuccessPayload {
  project: Project!
}

union ChangeProjectOwnerPayload = ErrorPayload | ChangeProjectOwnerSuccessPayload