schema {
  query: Query
  mutation: Mutation
}

type Query {
  descriptions: [Description!]!
  projects: [Project!]!
  project(projectId: ID!): Project
}

type Description {
  id: ID!
  label: String!
}

type Project {
  id: ID!
  label: String!
  assessments: [Assessment!]!
  assessment(assessmentId: ID!): Assessment
}

type Assessment {
  id: ID!
  label: String!
  categories: [Category!]!
}

type Category {
  id: ID!
  label: String!
  description: String!
  requirements: [Requirement!]!
}

type Requirement {
  id: ID!
  label: String!
  description: String!
  tests: [Test!]!
}

type Test {
  id: ID!
  label: String!
  description: String!
  status: Status
}

enum Status {
  SUCCESS
  FAILURE
}

type Mutation {
  createAssessment(input: CreateAssessmentInput!): CreateAssessmentPayload!
  updateTest(input: UpdateTestInput!): UpdateTestPayload!
}

type ErrorPayload {
  message: String!
}

input CreateAssessmentInput {
  projectId: ID!
  descriptionId: ID!
  label: String!
}

type CreateAssessmentSuccessPayload {
  assessment: Assessment!
}

union CreateAssessmentPayload = ErrorPayload | CreateAssessmentSuccessPayload

input UpdateTestInput {
  assessmentId: ID!
  testId: ID!
  status: Status!
}

type UpdateTestSuccessPayload {
  assessment: Assessment!
}

union UpdateTestPayload = ErrorPayload | UpdateTestSuccessPayload

