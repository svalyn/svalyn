schema {
  query: Query
  mutation: Mutation
}

scalar Date

type Query {
  descriptions: [Description!]!
  projects: [Project!]!
  project(projectId: ID!): Project
}

type Description {
  id: ID!
  label: String!
}

type Project {
  id: ID!
  label: String!
  assessments: [Assessment!]!
  assessment(assessmentId: ID!): Assessment
}

type Assessment {
  id: ID!
  label: String!
  categories: [Category!]!
  createdOn: Date!
  lastModifiedOn: Date!
  success: Int!
  failure: Int!
  testCount: Int!
  status: AssessmentStatus!
}

enum AssessmentStatus {
  OPEN
  CLOSED
}

type Category {
  id: ID!
  label: String!
  description: String!
  requirements: [Requirement!]!
}

type Requirement {
  id: ID!
  label: String!
  description: String!
  tests: [Test!]!
}

type Test {
  id: ID!
  label: String!
  description: String!
  steps: [String!]
  status: TestStatus
}

enum TestStatus {
  SUCCESS
  FAILURE
}

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload!
  createAssessment(input: CreateAssessmentInput!): CreateAssessmentPayload!
  updateAssessmentStatus(input: UpdateAssessmentStatusInput!): UpdateAssessmentStatusPayload!
  updateTest(input: UpdateTestInput!): UpdateTestPayload!
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload!
  deleteAssessment(input: DeleteAssessmentInput!): DeleteAssessmentPayload!
}

type ErrorPayload {
  message: String!
}

input CreateProjectInput {
  label: String!
}

type CreateProjectSuccessPayload {
  project: Project!
}

union CreateProjectPayload = ErrorPayload | CreateProjectSuccessPayload

input CreateAssessmentInput {
  projectId: ID!
  descriptionId: ID!
  label: String!
}

type CreateAssessmentSuccessPayload {
  assessment: Assessment!
}

union CreateAssessmentPayload = ErrorPayload | CreateAssessmentSuccessPayload

input UpdateAssessmentStatusInput {
  assessmentId: ID!
  status: AssessmentStatus!
}

type UpdateAssessmentStatusSuccessPayload {
  assessment: Assessment!
}

union UpdateAssessmentStatusPayload = ErrorPayload | UpdateAssessmentStatusSuccessPayload 

input UpdateTestInput {
  assessmentId: ID!
  testId: ID!
  status: TestStatus!
}

type UpdateTestSuccessPayload {
  assessment: Assessment!
}

union UpdateTestPayload = ErrorPayload | UpdateTestSuccessPayload

input DeleteProjectInput {
  projectId: ID!
}

type DeleteProjectSuccessPayload {
}

union DeleteProjectPayload = ErrorPayload | DeleteProjectSuccessPayload

input DeleteAssessmentInput {
  assessmentId: ID!
}

type DeleteAssessmentSuccessPayload {
}

union DeleteAssessmentPayload = ErrorPayload | DeleteAssessmentSuccessPayload